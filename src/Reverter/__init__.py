"""
    Main driver for application
    Author: Corey Fournier
            Sam Gleske
"""
from EntryList.RegShotListReader import RegShotListReader
from WindowsRegistry.WindowsRegistry import WindowsRegistry
from WindowsRegistry.WindowsRegistry import RegistryKey
from WindowsRegistry.WindowsRegistry import WindowsRegistryException
from SwitchParser import *
import sys
import re


TAB = "\t"
NEW_LINE = "\n"
FILE_NAME_ARGUMENT_POSITION = 1

sp = SwitchParser(sys.argv)
""" Exit if there is not file name. The class handles the error messages."""
if sp.fileName == "" : exit()

registryInterface = WindowsRegistry()
registryList = RegShotListReader(sp.fileName)

""" If user gave -N FILE_OUTPUT_NAME then generate an NSIS script instead of removing entries """
if sp.nsisOutput != '':
    executables = []
    services = []
    service_keys = []
    registeredDLLs = []
    f = open(sp.nsisOutput, 'w')
    """ Generate the beginning of the NSIS File """
    f.write('; Script generated by Reverter for RegShot' + NEW_LINE)
    f.write('; https://sourceforge.net/projects/registrykeyremo/' + NEW_LINE)
    f.write('; NSIS Script Generating implementation created by Sam Gleske (sag47)' + NEW_LINE)
    f.write('; http://www.gleske.net/' + NEW_LINE)
    f.write(NEW_LINE)
    f.write('XPStyle on' + NEW_LINE)
    f.write('CRCCheck on' + NEW_LINE)
    f.write('RequestExecutionLevel admin' + NEW_LINE)
    f.write(NEW_LINE)
    f.write('; Best Compression' + NEW_LINE)
    f.write('SetCompress Auto' + NEW_LINE)
    f.write('SetCompressor /SOLID lzma' + NEW_LINE)
    f.write('SetCompressorDictSize 32' + NEW_LINE)
    f.write('SetDatablockOptimize On' + NEW_LINE)
    f.write(NEW_LINE)
    f.write('Name "Reverter NSIS Script"' + NEW_LINE)
    f.write('OutFile "auto_revert.exe"' + NEW_LINE)
    f.write('InstallDir "$TEMP"' + NEW_LINE)
    f.write('Icon "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"' + NEW_LINE)
    f.write('BrandingText "RegShot Reverter"' + NEW_LINE)
    f.write('ShowInstDetails show' + NEW_LINE)
    f.write(';SilentInstall silent' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to delete all registry key names/values """
    f.write('Function deleteValues' + NEW_LINE)
    f.write('; Delete all registry key names/values' + NEW_LINE)
    for line in registryList.getValues():
        if line.startswith("HKLM") :
            root_key = line.split('\\',1)[0]
            str1 = line.split(': ')[0]
            p = re.compile("[A-Z]:+")
            str2 = p.split(str1.split('\\',1)[1])[0];
            str3 = str2.split(":")[0]
            sub_key = str3.rsplit('\\',1)[0]
            key_name = str1.split(sub_key + '\\')[1]
            f.write('  DeleteRegValue {0} "{1}" "{2}"'.format( root_key, sub_key, key_name ) + NEW_LINE)
        elif line.startswith("HKU") :
            root_key = line.split('\\',1)[0]
            str1 = line.split(': ')[0]
            p = re.compile("[A-Z]:+")
            str2 = p.split(str1.split('\\',1)[1])[0];
            str3 = str2.split(":")[0]
            sub_key = str3.rsplit('\\',1)[0]
            key_name = str1.split(sub_key + '\\')[1]
            f.write('  DeleteRegValue {0} "{1}" "{2}"'.format( root_key, sub_key, key_name ) + NEW_LINE)
            
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to delete all registry sub keys that were created """
    f.write('Function deleteKeys' + NEW_LINE)
    f.write('; Delete all registry Keys' + NEW_LINE)
    print "Services found at: "
    for line in registryList.getKeys():
        if "SYSTEM\\CurrentControlSet\\Services" in line :
            service_match = "false"
            for temp in service_keys :
                if temp == line.split('\\')[4] :
                    service_match = "true"
            if service_match != "true" :
                if line.split('\\')[4] != "Eventlog" :
                    print "  " + line
                    service_keys.append(line.split('\\')[4])
                    services.append(line)
        f.write('  DeleteRegKey {0} "{1}"'.format( line.split('\\',1)[0], line.split('\\',1)[1] ))
        f.write( NEW_LINE )
    if len(services) == 0 :
        print "None"
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to delete all files """
    f.write('Function deleteFiles' + NEW_LINE)
    f.write('; Delete all files' + NEW_LINE)
    print "Executables and Dynamic Link Libraries found at: "
    for line in registryList.getFiles():
        if line.endswith("exe") :
            i = 0
            for temp in line.split('\\') :
                i = i + 1
            print "  " + line
            executables.append(line.split('\\')[i-1])
        elif line.endswith("dll") :
            print "  " + line
            registeredDLLs.append(line)
        f.write('  Delete "' + line + '"' + NEW_LINE)
    if len(executables) == 0 :
        print "  None"
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to delete all folders """
    f.write('Function deleteFolders' + NEW_LINE)
    f.write('; Delete all folders' + NEW_LINE)
    for line in registryList.getFolders():
        f.write('  RMDir /r "' + line + '"' + NEW_LINE)
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to stop all services """
    f.write('Function stopServices' + NEW_LINE)
    f.write('; Stop all services (if service doesn\'t exist then don\'t execute the command)' + NEW_LINE)
    for line in services :
        f.write('  ReadRegStr $0 {0} "{1}" "DisplayName"'.format( line.split('\\',1)[0], line.split('\\',1)[1] ))
        f.write( NEW_LINE )
        f.write('    StrCmp $0 "" +2' + NEW_LINE)
        f.write('    ExecWait "net stop $\\"$0$\\""' + NEW_LINE)
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to kill all executables (*.exe) """
    f.write('Function killExecutables' + NEW_LINE)
    f.write('; Kill all executables' + NEW_LINE)
    for line in executables :
        f.write('  ExecWait "taskkill /IM $\\"' + line + '$\\""' + NEW_LINE)
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)
    
    """ Generate commands to unregister all Dynamic Link Libraries (*.dll) """
    f.write('Function unregisterDLLs' + NEW_LINE)
    f.write('; unregister all Dynamic Link Libraries' + NEW_LINE)
    for line in registeredDLLs :
        f.write('  ExecWait "regsvr32 /u /s $\\"' + line + '$\\""' + NEW_LINE)
    f.write('FunctionEnd' + NEW_LINE)
    f.write(NEW_LINE)

    f.write('Section "MainSection" SEC01' + NEW_LINE)
    f.write('  Call stopServices' + NEW_LINE)
    f.write('  Call killExecutables' + NEW_LINE)
    f.write('  Call unregisterDLLs' + NEW_LINE)
    f.write('  Call deleteFiles' + NEW_LINE)
    f.write('  Call deleteFolders' + NEW_LINE)
    f.write('  Call deleteValues' + NEW_LINE)
    f.write('  Call deleteKeys' + NEW_LINE)
    f.write('  DetailPrint ""' + NEW_LINE)
    f.write('  DetailPrint "All done, Thanks for using Corey And Mike\'s Registry Reverter."' + NEW_LINE)
    f.write('  DetailPrint "NSIS Script Generator written by Sam Gleske."' + NEW_LINE)
    f.write('  DetailPrint "https://sourceforge.net/projects/registrykeyremo/"' + NEW_LINE)
    f.write('  MessageBox MB_OK "It is recommended to reboot your computer and run this auto_reverter again to ensure all entries have been fully removed."' + NEW_LINE)
    f.write('SectionEnd' + NEW_LINE)
    f.close()
elif sp.deleteWithCascade :
    print "Deleting all keys with cascade\n"
    for line in registryList.getKeys():
        print TAB + "Removing: " + line
        keyInstance = RegistryKey(line.strip())
        try:
            registryInterface.removeKeyCascade(keyInstance)      
        except WindowsRegistryException, (errno, strerror):
            """ Ignore the error because there is no telling were the cascade will be"""
            if errno == 2 :
                pass   

else : 
    print "Processing all keys\n"
    for line in registryList.getKeys():
        print TAB + "Removing: " + line
        keyInstance = RegistryKey(line.strip())
        try:
            registryInterface.removeKey(keyInstance)
        except WindowsRegistryException, e:
            print e
    
    print NEW_LINE
    print "Processing all values\n"
    
    for line in registryList.getValues():
        if line.startswith("HKLM") :
            print TAB + "Removing: " + line
            keyInstance = RegistryKey(line.strip())
            try:
                registryInterface.removeValue(keyInstance)
            except WindowsRegistryException, e:
                print e
        elif line.startswith("HKU") :
            print TAB + "Removing: " + line
            keyInstance = RegistryKey(line.strip())
            try:
                registryInterface.removeValue(keyInstance)
            except WindowsRegistryException, e:
                print e
   
print NEW_LINE    
print "All done, Thanks for using Corey And Mike's Registry Reverter."
print "NSIS Script Generator written by Sam Gleske."
print NEW_LINE


